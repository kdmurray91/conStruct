initialize() {

    initializeSLiMModelType("nonWF");
    initializeSLiMOptions(dimensionality="xy");
    initializeTreeSeq();

    createDirectory(OUTDIR);
    defineConstant("OUTFILE", paste(c(OUTDIR, "results.trees"), sep="/"));

    defineConstant("K", 100);  // carrying-capacity per unit square
    defineConstant("S", 0.1);  // sigma_S, the spatial interaction and dispersal distance
    defineConstant("L", 4);    // mean lifetime at stationarity
    defineConstant("W", 0.5);  // width and height of the simulated area

    initializeMutationType("m1", 0.5, "g", -0.005, 2);
    initializeGenomicElementType("g1", m1, 1.0);
    initializeGenomicElement(g1, 0, 1e8-1);
    initializeMutationRate(0.0);
    initializeRecombinationRate(1e-8);
    
    // spatial competition and mate choice
    initializeInteractionType(1, "xy", reciprocal=T, maxDistance=S * 3);
    i1.setInteractionFunction("n", 1.0, S);

}

reproduction() {
    // choose our nearest neighbor as a mate, within the max distance
    mate = i1.nearestNeighbors(individual, 1);
    if (mate.size()) {
        for (i in seqLen(rpois(1, 1/L))) {
            offspring = subpop.addCrossed(individual, mate);
            pos = individual.spatialPosition + rnorm(2, 0, S);
            offspring.setSpatialPosition(p1.pointReflected(pos));
        }
    }
    return NULL;
}

1 early() {
    sim.addSubpop("p1", 100);
    p1.setSpatialBounds(c(0, 0, W, W));
    // random initial positions
    for (ind in p1.individuals)
        ind.setSpatialPosition(p1.pointUniform());
    i1.evaluate();

    habitat = rep(1.0, 25);
	p1.defineSpatialMap("habitat", "xy", c(5, 5), habitat, interpolate=T,
		valueRange=c(0.0, 2.0), colors=c("black", "blue"));

    // header info
    catn("generation" + " " + "individualCount" + " " + "time");
}

early() {
    i1.evaluate(p1);
    inds = p1.individuals;
    for (ind in inds) {
        competition = i1.totalOfNeighborStrengths(ind);
        quality = max(0.0, p1.spatialMapValue("habitat", ind.spatialPosition));
        ind.fitnessScaling = 2 / (1 + (L + 1) / (L - 1) * (competition / (quality * K * 2 * PI * S^2)));
    }
}

1: late() {
    i1.evaluate(p1);

    if ((sim.generation % 100) == 0) {
        cat(sim.generation + " " + p1.individualCount);
        catn(" " + clock());
    }
}

4000 early() {
    habitat = c(rep(0.1, 10), 2.0, rep(0.0, 3), 2.0, rep(0, 10));
	p1.defineSpatialMap("habitat", "xy", c(5, 5), habitat, interpolate=T,
		valueRange=c(0.0, 2.0), colors=c("black", "blue"));
}

6000 early() {
    habitat = c(rep(1.1, 25));
	p1.defineSpatialMap("habitat", "xy", c(5, 5), habitat, interpolate=T,
		valueRange=c(0.0, 2.0), colors=c("black", "blue"));
}

10000 late() {
    sim.treeSeqOutput(OUTFILE, simplify=T);
}

